// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: TJwdvQ55yqK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Lo3ARtUvly/codeComponent
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicBestNewsletters.module.css"; // plasmic-import: TJwdvQ55yqK/css

export type PlasmicBestNewsletters__VariantMembers = {};
export type PlasmicBestNewsletters__VariantsArgs = {};
type VariantPropType = keyof PlasmicBestNewsletters__VariantsArgs;
export const PlasmicBestNewsletters__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBestNewsletters__ArgsType = {};
type ArgPropType = keyof PlasmicBestNewsletters__ArgsType;
export const PlasmicBestNewsletters__ArgProps = new Array<ArgPropType>();

export type PlasmicBestNewsletters__OverridesType = {
  root?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  hectoNav?: p.Flex<typeof HectoNav>;
  h2?: p.Flex<"h2">;
  bestCall?: p.Flex<typeof DataFetcher>;
  img?: p.Flex<typeof p.PlasmicImg>;
  h3?: p.Flex<"h3">;
  columns?: p.Flex<"div">;
  footerBottom?: p.Flex<"div">;
};

export interface DefaultBestNewslettersProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBestNewsletters__RenderFunc(props: {
  variants: PlasmicBestNewsletters__VariantsArgs;
  args: PlasmicBestNewsletters__ArgsType;
  overrides: PlasmicBestNewsletters__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBestNewsletters.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBestNewsletters.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBestNewsletters.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <PlasmicHead
              data-plasmic-name={"head"}
              data-plasmic-override={overrides.head}
              className={classNames("__wab_instance", sty.head)}
              title={"The Best Newsletters" as const}
            />

            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__pce0)}>
              <div className={classNames(projectcss.all, sty.freeBox__keHnI)}>
                <div className={classNames(projectcss.all, sty.freeBox__cr9Rp)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__xZ0R6
                    )}
                  >
                    {(() => {
                      try {
                        return "The Best " + $ctx.params.slug + " Newsletters";
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "The Best";
                        }
                        throw e;
                      }
                    })()}
                  </h1>

                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {(() => {
                      try {
                        return (
                          "Stay on top of " +
                          $ctx.params.slug +
                          " related news and developments"
                        );
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "The Best";
                        }
                        throw e;
                      }
                    })()}
                  </h2>
                </div>
              </div>
            </div>

            {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
              <DataFetcher
                data-plasmic-name={"bestCall"}
                data-plasmic-override={overrides.bestCall}
                className={classNames("__wab_instance", sty.bestCall)}
                dataName={"fetchedData" as const}
                errorDisplay={
                  <ph.DataCtxReader>
                    {$ctx => "Error fetching data"}
                  </ph.DataCtxReader>
                }
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json"
                }}
                key={currentIndex}
                loadingDisplay={
                  <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
                }
                method={"GET" as const}
                noLayout={false}
                url={
                  'https://app.hecto.io/api/1.1/obj/newsletter?contraint=[ { "key": "VERIFIED", "constraint_type": "is_not_empty" }{"key": "Newsletter Category", "constraint_type": "contains", "value":"Technology"}{"sort_field": "Subscribers","descending":"True"}]' as const
                }
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    (
                      (() => {
                        try {
                          return $ctx.fetchedData.response.results;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qfrck
                        )}
                        key={currentIndex}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__xMqbg
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem["Business Name"];
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Title";
                              }
                              throw e;
                            }
                          })()}
                        </h1>

                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"223px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"300px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return currentItem["Profile Image"];
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z5G61
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"What is this newsletter about?"}
                            </span>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lltQe
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem["Summary - Short"];
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Newsdletter Description";
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hZqs
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"How often is it published?"}
                            </span>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pddxR
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem["Newsletter Freq"];
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Cadence";
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xZzg
                          )}
                        >
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tcY
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"How many people are reading this newsletter?"}
                            </span>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gIi0X
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.Subscribers;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oChGd
                          )}
                        >
                          <h3
                            data-plasmic-name={"h3"}
                            data-plasmic-override={overrides.h3}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Want to reach their target audience? Buy an advertisment in their newsletter with "
                                }
                              </React.Fragment>
                              {
                                <p.PlasmicLink
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.link__dsCgx
                                  )}
                                  component={Link}
                                  href={(() => {
                                    try {
                                      return (
                                        "https://www.hecto.io/newsletter/" +
                                        currentItem.Slug
                                      );
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "www.hecto.io";
                                      }
                                      throw e;
                                    }
                                  })()}
                                  platform={"nextjs"}
                                >
                                  {"Hecto"}
                                </p.PlasmicLink>
                              }
                              <React.Fragment>{". "}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        </div>
                      </div>
                    ))
                  }
                </ph.DataCtxReader>
              </DataFetcher>
            ))}

            <div className={classNames(projectcss.all, sty.freeBox___24DGy)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__x6NTx)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__j1EbB)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sTBlh
                    )}
                  >
                    {"© Hecto. All rights reserved"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__c8B8X
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w4Dls
                      )}
                    >
                      {"Privacy"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hctNf
                      )}
                    >
                      {"Terms and Conditions"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iN3Lw
                      )}
                    >
                      {"Contact Us"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ebBw
                      )}
                    >
                      {"Blog"}
                    </div>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "head",
    "hectoNav",
    "h2",
    "bestCall",
    "img",
    "h3",
    "columns",
    "footerBottom"
  ],
  head: ["head"],
  hectoNav: ["hectoNav"],
  h2: ["h2"],
  bestCall: ["bestCall", "img", "h3"],
  img: ["img"],
  h3: ["h3"],
  columns: ["columns"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  head: typeof PlasmicHead;
  hectoNav: typeof HectoNav;
  h2: "h2";
  bestCall: typeof DataFetcher;
  img: typeof p.PlasmicImg;
  h3: "h3";
  columns: "div";
  footerBottom: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBestNewsletters__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBestNewsletters__VariantsArgs;
    args?: PlasmicBestNewsletters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBestNewsletters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBestNewsletters__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBestNewsletters__ArgProps,
          internalVariantPropNames: PlasmicBestNewsletters__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBestNewsletters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBestNewsletters";
  } else {
    func.displayName = `PlasmicBestNewsletters.${nodeName}`;
  }
  return func;
}

export const PlasmicBestNewsletters = Object.assign(
  // Top-level PlasmicBestNewsletters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    hectoNav: makeNodeComponent("hectoNav"),
    h2: makeNodeComponent("h2"),
    bestCall: makeNodeComponent("bestCall"),
    img: makeNodeComponent("img"),
    h3: makeNodeComponent("h3"),
    columns: makeNodeComponent("columns"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicBestNewsletters
    internalVariantProps: PlasmicBestNewsletters__VariantProps,
    internalArgProps: PlasmicBestNewsletters__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto | Newsletter advertising, simplified",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBestNewsletters;
/* prettier-ignore-end */
