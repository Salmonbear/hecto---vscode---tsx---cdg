// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: a7pox4NMuYQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import Button from "../../Button"; // plasmic-import: 16yj8MRmRBT/component
import Footer from "../../Footer"; // plasmic-import: Iw1cdeIou4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicBrandCollaborationsLanding.module.css"; // plasmic-import: a7pox4NMuYQ/css

import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: g1j_XxrLjbNK/icon

export type PlasmicBrandCollaborationsLanding__VariantMembers = {};
export type PlasmicBrandCollaborationsLanding__VariantsArgs = {};
type VariantPropType = keyof PlasmicBrandCollaborationsLanding__VariantsArgs;
export const PlasmicBrandCollaborationsLanding__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBrandCollaborationsLanding__ArgsType = {
  test?: string;
};
type ArgPropType = keyof PlasmicBrandCollaborationsLanding__ArgsType;
export const PlasmicBrandCollaborationsLanding__ArgProps =
  new Array<ArgPropType>("test");

export type PlasmicBrandCollaborationsLanding__OverridesType = {
  root?: p.Flex<"div">;
  hectoNav?: p.Flex<typeof HectoNav>;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  h1?: p.Flex<"h1">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultBrandCollaborationsLandingProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBrandCollaborationsLanding__RenderFunc(props: {
  variants: PlasmicBrandCollaborationsLanding__VariantsArgs;
  args: PlasmicBrandCollaborationsLanding__ArgsType;
  overrides: PlasmicBrandCollaborationsLanding__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicBrandCollaborationsLanding.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBrandCollaborationsLanding.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBrandCollaborationsLanding.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <DataFetcher
              data-plasmic-name={"httpApiFetcher"}
              data-plasmic-override={overrides.httpApiFetcher}
              className={classNames("__wab_instance", sty.httpApiFetcher)}
              dataName={"fetchedData" as const}
              errorDisplay={
                <ph.DataCtxReader>
                  {$ctx =>
                    true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tD26
                        )}
                      >
                        {"Error fetching data"}
                      </div>
                    ) : null
                  }
                </ph.DataCtxReader>
              }
              headers={{
                Authorization:
                  "Bearer secret_czne9oAwOvw4d07E8iLIgR6XUtSRmkr9DPKMIZpemQF",
                "Notion-Version": "2022-02-02",
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
              }
              method={"GET" as const}
              noLayout={false}
              previewErrorDisplay={false}
              previewSpinner={false}
              queryKey={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={
                "https://api.notion.com/api/v1/databases/6040e68f7b3c49938cd67cdd6b260fb3" as const
              }
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__li6Bc
                    )}
                  >
                    {"Enter some text"}
                  </div>
                )}
              </ph.DataCtxReader>
            </DataFetcher>

            <div className={classNames(projectcss.all, sty.freeBox__mqBS)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cGdpT
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 700 }}
                        >
                          {"Brand Collaborations."}
                        </span>
                      </React.Fragment>
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iNMn4
                )}
              >
                {
                  "Brand collaboration examples to inspire your marketing strategy"
                }
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__b1RH)}>
              <CmsQueryRepeater
                data-plasmic-name={"cmsDataLoader"}
                data-plasmic-override={overrides.cmsDataLoader}
                className={classNames("__wab_instance", sty.cmsDataLoader)}
                desc={false}
                emptyMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__npSnc
                        )}
                      >
                        {"No matching published entries found."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={0 as const}
                loadingMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bd36J
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"brandCollabs" as const}
                useDraft={false}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return (
                            "https://www.hecto.io/brand-collaborations/" +
                            $ctx.plasmicCmsBrandCollabsItem.data.slug
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__ueaC0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__iWKsu
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"212px" as const}
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.plasmicCmsBrandCollabsItem.data
                                  .leadImage.url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      </div>

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__vWgi3
                        )}
                      >
                        {(() => {
                          try {
                            return $ctx.plasmicCmsBrandCollabsItem.data.h1Title;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()}
                      </h2>
                    </p.PlasmicLink>
                  )}
                </ph.DataCtxReader>
              </CmsQueryRepeater>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__hxTn9)}>
              <div className={classNames(projectcss.all, sty.columns__xAh9V)}>
                <div className={classNames(projectcss.all, sty.column__vundk)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__exmYa
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Ready to start your campaign?"}
                      </span>
                    </React.Fragment>
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__chBqe
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Find the perfect newsletter for your brand"}
                      </span>
                    </React.Fragment>
                  </div>

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"blue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yKt40
                      )}
                    >
                      {"Search Newsletters"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__z38NJ)}>
              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer)}
              />
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hectoNav",
    "httpApiFetcher",
    "h1",
    "cmsDataLoader",
    "link",
    "img",
    "button",
    "svg",
    "footer"
  ],
  hectoNav: ["hectoNav"],
  httpApiFetcher: ["httpApiFetcher"],
  h1: ["h1"],
  cmsDataLoader: ["cmsDataLoader", "link", "img"],
  link: ["link", "img"],
  img: ["img"],
  button: ["button", "svg"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hectoNav: typeof HectoNav;
  httpApiFetcher: typeof DataFetcher;
  h1: "h1";
  cmsDataLoader: typeof CmsQueryRepeater;
  link: "a";
  img: typeof p.PlasmicImg;
  button: typeof Button;
  svg: "svg";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrandCollaborationsLanding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrandCollaborationsLanding__VariantsArgs;
    args?: PlasmicBrandCollaborationsLanding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBrandCollaborationsLanding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBrandCollaborationsLanding__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBrandCollaborationsLanding__ArgProps,
          internalVariantPropNames:
            PlasmicBrandCollaborationsLanding__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBrandCollaborationsLanding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrandCollaborationsLanding";
  } else {
    func.displayName = `PlasmicBrandCollaborationsLanding.${nodeName}`;
  }
  return func;
}

export const PlasmicBrandCollaborationsLanding = Object.assign(
  // Top-level PlasmicBrandCollaborationsLanding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hectoNav: makeNodeComponent("hectoNav"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    h1: makeNodeComponent("h1"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicBrandCollaborationsLanding
    internalVariantProps: PlasmicBrandCollaborationsLanding__VariantProps,
    internalArgProps: PlasmicBrandCollaborationsLanding__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto Blog",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBrandCollaborationsLanding;
/* prettier-ignore-end */
