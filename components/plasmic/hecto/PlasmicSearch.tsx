// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: HLCMdt64_9V
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Lo3ARtUvly/codeComponent
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Button from "../../Button"; // plasmic-import: 16yj8MRmRBT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: HLCMdt64_9V/css

export type PlasmicSearch__VariantMembers = {};
export type PlasmicSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicSearch__ArgsType = {};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicSearch__OverridesType = {
  root?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  hectoNav?: p.Flex<typeof HectoNav>;
  searchCall?: p.Flex<typeof DataFetcher>;
  img?: p.Flex<typeof p.PlasmicImg>;
  h3?: p.Flex<"h3">;
  outer?: p.Flex<"div">;
  container?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  footerBottom?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultSearchProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSearch.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSearch.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSearch.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <PlasmicHead
              data-plasmic-name={"head"}
              data-plasmic-override={overrides.head}
              className={classNames("__wab_instance", sty.head)}
              title={"The Best Newsletters" as const}
            />

            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__hiXbx)}>
              <div className={classNames(projectcss.all, sty.freeBox__vw0Zr)}>
                {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                  <DataFetcher
                    data-plasmic-name={"searchCall"}
                    data-plasmic-override={overrides.searchCall}
                    className={classNames("__wab_instance", sty.searchCall)}
                    dataName={"newsletterList" as const}
                    errorDisplay={null}
                    headers={{
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    }}
                    key={currentIndex}
                    loadingDisplay={
                      <ph.DataCtxReader>
                        {$ctx => "Loading..."}
                      </ph.DataCtxReader>
                    }
                    method={"GET" as const}
                    noLayout={false}
                    queryKey={"" as const}
                    url={
                      'https://app.hecto.io/api/1.1/obj/newsletter?constraint=[ { "key": "VERIFIED", "constraint_type": "is_not_empty" }]' as const
                    }
                  >
                    <ph.DataCtxReader>
                      {$ctx =>
                        (
                          (() => {
                            try {
                              return $ctx.newsletterList.response.results;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return [];
                              }
                              throw e;
                            }
                          })() ?? []
                        ).map((currentItem, currentIndex) => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aCk30
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__rEt2N
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__pcDJc
                                )}
                              >
                                {true ? (
                                  <p.PlasmicImg
                                    data-plasmic-name={"img"}
                                    data-plasmic-override={overrides.img}
                                    alt={""}
                                    className={classNames(sty.img)}
                                    displayHeight={"auto" as const}
                                    displayMaxHeight={"150px" as const}
                                    displayMaxWidth={"150px" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"auto" as const}
                                    loading={"lazy" as const}
                                    src={(() => {
                                      try {
                                        return currentItem["Profile Image"];
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                ) : null}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__hl8SH
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__vdpeD
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem["Business Name"];
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </h2>

                                <h3
                                  data-plasmic-name={"h3"}
                                  data-plasmic-override={overrides.h3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem["Summary - Short"];
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </h3>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__v4GjG
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem["Business Name"];
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oGnV
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem["Business Name"];
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))
                      }
                    </ph.DataCtxReader>
                  </DataFetcher>
                ))}
              </div>
            </div>

            {true ? (
              <section
                className={classNames(projectcss.all, sty.columns__ygArp)}
              >
                <div
                  data-plasmic-name={"outer"}
                  data-plasmic-override={overrides.outer}
                  className={classNames(projectcss.all, sty.outer)}
                >
                  <div
                    data-plasmic-name={"container"}
                    data-plasmic-override={overrides.container}
                    className={classNames(projectcss.all, sty.container)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__kFHrQ)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__fd2AQ
                        )}
                      >
                        {"To Make Requests For The\nFurther Information"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sRtFe
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__hIxAk)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"blue" as const}
                        link={"#" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tOpG
                          )}
                        >
                          {"Join With Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </div>
              </section>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__upMkq)}>
              <div className={classNames(projectcss.all, sty.columns__v4YGy)} />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___1QhWx)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Qypc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aGbxC
                    )}
                  >
                    {"© Hecto. All rights reserved"}
                  </div>

                  <p.PlasmicLink
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Km9W
                      )}
                    >
                      {"Privacy"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pZ8Jk
                      )}
                    >
                      {"Terms and Conditions"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mgTyW
                      )}
                    >
                      {"Contact Us"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eTrBf
                      )}
                    >
                      {"Blog"}
                    </div>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "head",
    "hectoNav",
    "searchCall",
    "img",
    "h3",
    "outer",
    "container",
    "button",
    "footerBottom",
    "link"
  ],
  head: ["head"],
  hectoNav: ["hectoNav"],
  searchCall: ["searchCall", "img", "h3"],
  img: ["img"],
  h3: ["h3"],
  outer: ["outer", "container", "button"],
  container: ["container", "button"],
  button: ["button"],
  footerBottom: ["footerBottom", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  head: typeof PlasmicHead;
  hectoNav: typeof HectoNav;
  searchCall: typeof DataFetcher;
  img: typeof p.PlasmicImg;
  h3: "h3";
  outer: "div";
  container: "div";
  button: typeof Button;
  footerBottom: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearch__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    head: makeNodeComponent("head"),
    hectoNav: makeNodeComponent("hectoNav"),
    searchCall: makeNodeComponent("searchCall"),
    img: makeNodeComponent("img"),
    h3: makeNodeComponent("h3"),
    outer: makeNodeComponent("outer"),
    container: makeNodeComponent("container"),
    button: makeNodeComponent("button"),
    footerBottom: makeNodeComponent("footerBottom"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto | Newsletter advertising, simplified",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
