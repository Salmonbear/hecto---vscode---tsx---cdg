// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: EV2qDJ3DrUG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Lo3ARtUvly/codeComponent
import Button from "../../Button"; // plasmic-import: 16yj8MRmRBT/component
import Footer from "../../Footer"; // plasmic-import: Iw1cdeIou4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicBrandCollaborationsList.module.css"; // plasmic-import: EV2qDJ3DrUG/css

import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: g1j_XxrLjbNK/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: aExR7mqu1-8/icon

export type PlasmicBrandCollaborationsList__VariantMembers = {};
export type PlasmicBrandCollaborationsList__VariantsArgs = {};
type VariantPropType = keyof PlasmicBrandCollaborationsList__VariantsArgs;
export const PlasmicBrandCollaborationsList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBrandCollaborationsList__ArgsType = {
  test?: string;
};
type ArgPropType = keyof PlasmicBrandCollaborationsList__ArgsType;
export const PlasmicBrandCollaborationsList__ArgProps = new Array<ArgPropType>(
  "test"
);

export type PlasmicBrandCollaborationsList__OverridesType = {
  root?: p.Flex<"div">;
  hectoNav?: p.Flex<typeof HectoNav>;
  leadTitle?: p.Flex<"h1">;
  h1?: p.Flex<"h1">;
  cmsDataFetcher?: p.Flex<typeof CmsQueryRepeater>;
  head?: p.Flex<typeof PlasmicHead>;
  penguinXPhiladelphia?: p.Flex<"h1">;
  nikeXConverseXChinaTownMarket?: p.Flex<"h1">;
  nomadlistXBufferXRemoteOk?: p.Flex<"h1">;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  footerBottom?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultBrandCollaborationsListProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBrandCollaborationsList__RenderFunc(props: {
  variants: PlasmicBrandCollaborationsList__VariantsArgs;
  args: PlasmicBrandCollaborationsList__ArgsType;
  overrides: PlasmicBrandCollaborationsList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicBrandCollaborationsList.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBrandCollaborationsList.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBrandCollaborationsList.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <h1
              data-plasmic-name={"leadTitle"}
              data-plasmic-override={overrides.leadTitle}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.leadTitle
              )}
            >
              {(() => {
                try {
                  return $ctx.plasmicCmsBrandCollabsItem.data.h1Title;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </h1>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__kNye5
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__iNHw
                    )}
                    component={Link}
                    href={`/resources`}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#BFBFBF" }}
                      >
                        {"Brand Collaborations"}
                      </span>
                    </React.Fragment>
                  </p.PlasmicLink>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h2>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__nE3Uz
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Best Brand Collaborations Examples to Inspire"}
                  </h1>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h2>
            <CmsQueryRepeater
              data-plasmic-name={"cmsDataFetcher"}
              data-plasmic-override={overrides.cmsDataFetcher}
              className={classNames("__wab_instance", sty.cmsDataFetcher)}
              desc={false}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xXcG
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0 as const}
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gPxMa
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"brandCollabs" as const}
              useDraft={false}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <PlasmicHead
                    data-plasmic-name={"head"}
                    data-plasmic-override={overrides.head}
                    className={classNames("__wab_instance", sty.head)}
                    description={(() => {
                      try {
                        return $ctx.plasmicCmsBlogArticlesItem.data
                          .metaDescription;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={"/plasmic/hecto/images/metaImagepng.png"}
                    title={(() => {
                      try {
                        return (
                          "Hecto | " +
                          $ctx.plasmicCmsBlogArticlesItem.data.h1Heading
                        );
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                )}
              </ph.DataCtxReader>
            </CmsQueryRepeater>
            <div className={classNames(projectcss.all, sty.freeBox__bd16Z)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5URvj
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"penguinXPhiladelphia"}
                      data-plasmic-override={overrides.penguinXPhiladelphia}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.penguinXPhiladelphia
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Penguin x Philadelphia\n\n"}
                        </React.Fragment>
                        {
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__naH2E
                            )}
                          >
                            {"Which brands were involved?"}
                          </h2>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </h1>
                  }
                  <React.Fragment>
                    {
                      "\nPhiladelphia is a very popular brand of cheese, but some people may not know the best way to use it.\n\nAsda is a huge supermarket chain in the UK, and it used to be owned by Walmart.\n\nPenguin is actually the largest publishing house in the world, and they publish books for many famous people, including Michelle Obama and others.\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__bhzkg
                      )}
                    >
                      {"What was the brand collaboration?"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\nIt's great to see that Penguin and Philadelphia worked together on this cookbook project! Rather than just putting their names on an existing product like many other brand partnerships, they put in the effort to create something new for their brand collaboration. This not only helped Kraft's advertising campaign to promote Philadelphia as a delicious and easy ingredient for a quick meal, but it also made for a more meaningful collaboration.\n\nTo make things even better, the books were given as gifts to customers who bought more than one item. What a great way to incentivise purchases and raise brand awareness! The books were placed in the aisles of supermarkets, making it an effective way to reach potential customers.\n\nThe book was also made available for purchase on Amazon, which is fantastic for increasing brand awareness. All in all, it's clear that this collaboration was a success and helped to promote Philadelphia in a fun and creative way.\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__cIyDk
                      )}
                    >
                      {"What we love about this cross marketing project"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\nWow, this brand collaboration is really well done!\n\nBy teaming up with Penguin, Philadelphia gains excellent brand exposure. This collaboration also helps them reach new customers who may not have heard of them before.\n\nCustomers who receive the free book are even more motivated to buy more product and try out the delicious recipes inside.\n\nEven though the book is given away for free, it still encourages customers to buy *more* of the product. Plus, Kraft gets royalty payments, which is an additional source of revenue. It's a win-win for everyone!\n\n\n"
                    }
                  </React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"nikeXConverseXChinaTownMarket"}
                      data-plasmic-override={
                        overrides.nikeXConverseXChinaTownMarket
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.nikeXConverseXChinaTownMarket
                      )}
                    >
                      {"Nike x Converse x China Town Market"}
                    </h1>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__jMgi9
                      )}
                    >
                      {"\nWhich brands were involved?"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\n\nWe're not entirely sure about the official status of this cross collab, but we absolutely love it, so we just had to include it!\n\nChina Town Market is a streetwear brand and bootleg label located in New York.\n\nNike, on the other hand, needs no introduction whatsoever. It is one of the largest brands in the world.\n\nConverse is also a well-known brand in its own right, and has been owned by Nike since 2003!\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__p06Lf
                      )}
                    >
                      {"What was the brand collaboration?"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\nWe love the story behind China Town Market's (now Market) creation of a fun twist on the classic Chuck Taylor shoe. They created an unofficial converse collaboration  by combining the Nike swoosh and the Converse Chuck Taylor silhouette - two of the most demanded things in pop culture. It's such a cool idea!\n\nInstead of pursuing Instagram collabs, China Town Market decided to create a super exclusive shoe (a 1 of 1), which was given to NBA basketball star, Lebron James. He wore the shoe and posted it on social media, which set the internet on fire! Grammy award-winning artist even got in touch with Mike to get her own pair.\n\nThe missing context here is that Nike and Converse have never collaborated before. So, seeing the brand assets merged into one makes this bootleg an instant classic. What a great idea and superb execution by China Town Market!\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__qwN1
                      )}
                    >
                      {"What we love about this cross marketing project"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\nHey there!\n\nWe really appreciate the DIY spirit of this collaboration. Just to clarify, this is not your typical brand collaboration. Nike didn't officially partner up, and we don't usually endorse guerrilla marketing like this. However, there's no denying that the results were impressive and really put China Town Market on the map.\n\nIn fact, the brand started to outgrow its insular beginnings and was even questioned by the wider Chinese community, which led to a reconsideration of its name.\n\nInspiring story and great outcomes make this a great example of using brand juice to your advantage! \n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__uvH9W
                      )}
                    >
                      {"Where can I find out more?"}
                    </h2>
                  }
                  <React.Fragment>
                    {"\nYou can read a little more "}
                  </React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__j24
                      )}
                      component={Link}
                      href={
                        "https://hypebeast.com/2018/6/lebron-james-converse-chuck-taylor-bootleg-swoosh-sneaker-chinatown-market" as const
                      }
                      platform={"nextjs"}
                    >
                      {"here"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{"\n\n"}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"nomadlistXBufferXRemoteOk"}
                      data-plasmic-override={
                        overrides.nomadlistXBufferXRemoteOk
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.nomadlistXBufferXRemoteOk
                      )}
                    >
                      {"Nomadlist x Buffer x RemoteOK"}
                    </h1>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__iosJ2
                      )}
                    >
                      {"What was the brand partnership?\n"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "Nomadlist is an awesome online directory that lists cities and countries perfect for digital nomads to work from. It's really cool, if we do say so ourselves. Not only that, it's a multifaceted brand that inspired the creation of a community where nomads can arrange meetups and connect with like-minded people.\n\nRemoteOK is a spin-off from the success of Nomadlist. It's a remote work job board that specifically targets users with digital-based careers.\n\nBuffer is a fantastic social media automation tool that helps businesses and professionals manage their online presence. It focuses on enabling users to plan, schedule, and publish posts across multiple social media platforms.\n\nClearly, we can see that these audiences align perfectly. People who use social media and would pay for Buffer would definitely be interested in the digital nomad lifestyle and the state of remote working. Similarly, many digital nomads use and post on social media and would be interested in the longevity of their current lifestyle.\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__pvSAh
                      )}
                    >
                      {"What was the brand collaboration\n"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "The two brands worked together on a really cool project - a state of remote work report! They conducted a survey of over 2,000 remote workers from around the world to explore both the pros and cons of remote work as we head into 2022. \n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___5Mq5J
                      )}
                    >
                      {"Why we're excited about this cross marketing project"}
                    </h2>
                  }
                  <React.Fragment>
                    {
                      "\nWe love this brand collaboration because it's simple yet effective; just produce a report on something that your audience is interested in. But what really makes this brand partnership special is how well our audiences align with each other. Of course, there may be some people who haven't heard of Nomadlist yet, and vice versa. But that's okay! This type of partnership is a great opportunity for all parties involved to raise awareness and attract qualified leads to our brands.\n\n"
                    }
                  </React.Fragment>
                  {
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__w6Eng
                      )}
                    >
                      {"Where can I find out more?"}
                    </h2>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__zMnjI
                      )}
                      component={Link}
                      href={"https://buffer.com/state-of-remote-work" as const}
                      platform={"nextjs"}
                    >
                      {"State of Remote Work Report"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>{"\n\n"}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cM9Fv)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___7LvJw
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Want more marketing inspiration"}
                      </span>
                    </React.Fragment>
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwcw7
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Find the perfect newsletter for your brand"}
                      </span>
                    </React.Fragment>
                  </div>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__gQJwM
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"blue" as const}
                      endIcon={
                        <ArrowRightsvgIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      }
                      link={`/brand-collaborations`}
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d9JXe
                        )}
                      >
                        {"Search Collaboration Examples"}
                      </div>
                    </Button>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sM8W2)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer)}
                />
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hectoNav",
    "leadTitle",
    "h1",
    "cmsDataFetcher",
    "head",
    "penguinXPhiladelphia",
    "nikeXConverseXChinaTownMarket",
    "nomadlistXBufferXRemoteOk",
    "columns",
    "column",
    "button",
    "svg",
    "footerBottom",
    "footer"
  ],
  hectoNav: ["hectoNav"],
  leadTitle: ["leadTitle"],
  h1: ["h1"],
  cmsDataFetcher: ["cmsDataFetcher", "head"],
  head: ["head"],
  penguinXPhiladelphia: ["penguinXPhiladelphia"],
  nikeXConverseXChinaTownMarket: ["nikeXConverseXChinaTownMarket"],
  nomadlistXBufferXRemoteOk: ["nomadlistXBufferXRemoteOk"],
  columns: ["columns", "column", "button", "svg"],
  column: ["column", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"],
  footerBottom: ["footerBottom", "footer"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hectoNav: typeof HectoNav;
  leadTitle: "h1";
  h1: "h1";
  cmsDataFetcher: typeof CmsQueryRepeater;
  head: typeof PlasmicHead;
  penguinXPhiladelphia: "h1";
  nikeXConverseXChinaTownMarket: "h1";
  nomadlistXBufferXRemoteOk: "h1";
  columns: "div";
  column: "div";
  button: typeof Button;
  svg: "svg";
  footerBottom: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrandCollaborationsList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrandCollaborationsList__VariantsArgs;
    args?: PlasmicBrandCollaborationsList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBrandCollaborationsList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBrandCollaborationsList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBrandCollaborationsList__ArgProps,
          internalVariantPropNames: PlasmicBrandCollaborationsList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBrandCollaborationsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrandCollaborationsList";
  } else {
    func.displayName = `PlasmicBrandCollaborationsList.${nodeName}`;
  }
  return func;
}

export const PlasmicBrandCollaborationsList = Object.assign(
  // Top-level PlasmicBrandCollaborationsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hectoNav: makeNodeComponent("hectoNav"),
    leadTitle: makeNodeComponent("leadTitle"),
    h1: makeNodeComponent("h1"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    head: makeNodeComponent("head"),
    penguinXPhiladelphia: makeNodeComponent("penguinXPhiladelphia"),
    nikeXConverseXChinaTownMarket: makeNodeComponent(
      "nikeXConverseXChinaTownMarket"
    ),
    nomadlistXBufferXRemoteOk: makeNodeComponent("nomadlistXBufferXRemoteOk"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footerBottom: makeNodeComponent("footerBottom"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicBrandCollaborationsList
    internalVariantProps: PlasmicBrandCollaborationsList__VariantProps,
    internalArgProps: PlasmicBrandCollaborationsList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto Blog",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBrandCollaborationsList;
/* prettier-ignore-end */
