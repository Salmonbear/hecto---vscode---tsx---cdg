// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: EV2qDJ3DrUG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Lo3ARtUvly/codeComponent
import Button from "../../Button"; // plasmic-import: 16yj8MRmRBT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicBrandCollaborationsList.module.css"; // plasmic-import: EV2qDJ3DrUG/css

import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: g1j_XxrLjbNK/icon

export type PlasmicBrandCollaborationsList__VariantMembers = {};
export type PlasmicBrandCollaborationsList__VariantsArgs = {};
type VariantPropType = keyof PlasmicBrandCollaborationsList__VariantsArgs;
export const PlasmicBrandCollaborationsList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBrandCollaborationsList__ArgsType = {
  test?: string;
};
type ArgPropType = keyof PlasmicBrandCollaborationsList__ArgsType;
export const PlasmicBrandCollaborationsList__ArgProps = new Array<ArgPropType>(
  "test"
);

export type PlasmicBrandCollaborationsList__OverridesType = {
  root?: p.Flex<"div">;
  hectoNav?: p.Flex<typeof HectoNav>;
  leadTitle?: p.Flex<"h1">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  head?: p.Flex<typeof PlasmicHead>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  footerBottom?: p.Flex<"div">;
};

export interface DefaultBrandCollaborationsListProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBrandCollaborationsList__RenderFunc(props: {
  variants: PlasmicBrandCollaborationsList__VariantsArgs;
  args: PlasmicBrandCollaborationsList__ArgsType;
  overrides: PlasmicBrandCollaborationsList__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicBrandCollaborationsList.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBrandCollaborationsList.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBrandCollaborationsList.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <h1
              data-plasmic-name={"leadTitle"}
              data-plasmic-override={overrides.leadTitle}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.leadTitle
              )}
            >
              {(() => {
                try {
                  return $ctx.plasmicCmsBrandCollabsItem.data.h1Title;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </h1>

            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__kNye5
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__iNHw
                    )}
                    component={Link}
                    href={`/resources`}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#BFBFBF" }}
                      >
                        {"Resources"}
                      </span>
                    </React.Fragment>
                  </p.PlasmicLink>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h2>

            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__nE3Uz
              )}
            >
              {(() => {
                try {
                  return $ctx.plasmicCmsBrandCollabsItem.data.h2Subtitle;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()}
            </h2>

            <CmsQueryRepeater
              data-plasmic-name={"cmsDataLoader"}
              data-plasmic-override={overrides.cmsDataLoader}
              className={classNames("__wab_instance", sty.cmsDataLoader)}
              desc={false}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cwg9B
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0 as const}
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mdn5L
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"brandCollabs" as const}
              useDraft={false}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <PlasmicHead
                    data-plasmic-name={"head"}
                    data-plasmic-override={overrides.head}
                    className={classNames("__wab_instance", sty.head)}
                    description={(() => {
                      try {
                        return $ctx.plasmicCmsBlogArticlesItem.data
                          .metaDescription;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={"/plasmic/hecto/images/metaImagepng.png"}
                    title={(() => {
                      try {
                        return (
                          "Hecto | " +
                          $ctx.plasmicCmsBlogArticlesItem.data.h1Heading
                        );
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                )}
              </ph.DataCtxReader>
            </CmsQueryRepeater>

            <div className={classNames(projectcss.all, sty.freeBox__cM9Fv)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___7LvJw
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Ready to start your campaign?"}
                      </span>
                    </React.Fragment>
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwcw7
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Find the perfect newsletter for your brand"}
                      </span>
                    </React.Fragment>
                  </div>

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"blue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d9JXe
                      )}
                    >
                      {"Search Newsletters"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__sM8W2)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__cntn9)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__shXy8
                    )}
                  >
                    {"© Hecto . All rights reserved"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__z99Lk
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mqXeu
                      )}
                    >
                      {"Privacy"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s68Ec
                      )}
                    >
                      {"Terms and Conditions"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oiEoZ
                      )}
                    >
                      {"Contact Us"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bwz4S
                      )}
                    >
                      {"Blog"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__nyyMm)}
                    />
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hectoNav",
    "leadTitle",
    "cmsDataLoader",
    "head",
    "columns",
    "column",
    "button",
    "svg",
    "footerBottom"
  ],
  hectoNav: ["hectoNav"],
  leadTitle: ["leadTitle"],
  cmsDataLoader: ["cmsDataLoader", "head"],
  head: ["head"],
  columns: ["columns", "column", "button", "svg"],
  column: ["column", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hectoNav: typeof HectoNav;
  leadTitle: "h1";
  cmsDataLoader: typeof CmsQueryRepeater;
  head: typeof PlasmicHead;
  columns: "div";
  column: "div";
  button: typeof Button;
  svg: "svg";
  footerBottom: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrandCollaborationsList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrandCollaborationsList__VariantsArgs;
    args?: PlasmicBrandCollaborationsList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBrandCollaborationsList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBrandCollaborationsList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBrandCollaborationsList__ArgProps,
          internalVariantPropNames: PlasmicBrandCollaborationsList__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBrandCollaborationsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrandCollaborationsList";
  } else {
    func.displayName = `PlasmicBrandCollaborationsList.${nodeName}`;
  }
  return func;
}

export const PlasmicBrandCollaborationsList = Object.assign(
  // Top-level PlasmicBrandCollaborationsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hectoNav: makeNodeComponent("hectoNav"),
    leadTitle: makeNodeComponent("leadTitle"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    head: makeNodeComponent("head"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicBrandCollaborationsList
    internalVariantProps: PlasmicBrandCollaborationsList__VariantProps,
    internalArgProps: PlasmicBrandCollaborationsList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto Blog",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBrandCollaborationsList;
/* prettier-ignore-end */
