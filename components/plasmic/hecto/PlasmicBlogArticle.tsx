// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: VBD1lfaH6xV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HectoNav from "../../HectoNav"; // plasmic-import: 1Xqtr1aGys/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: Lo3ARtUvly/codeComponent
import Button from "../../Button"; // plasmic-import: 16yj8MRmRBT/component

import { useScreenVariants as useScreenVariantskILw5UiAaS1UF } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kILw5uiAaS1uF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hecto.module.css"; // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import sty from "./PlasmicBlogArticle.module.css"; // plasmic-import: VBD1lfaH6xV/css

import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: g1j_XxrLjbNK/icon

export type PlasmicBlogArticle__VariantMembers = {};
export type PlasmicBlogArticle__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogArticle__VariantsArgs;
export const PlasmicBlogArticle__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogArticle__ArgsType = {
  test?: string;
};
type ArgPropType = keyof PlasmicBlogArticle__ArgsType;
export const PlasmicBlogArticle__ArgProps = new Array<ArgPropType>("test");

export type PlasmicBlogArticle__OverridesType = {
  root?: p.Flex<"div">;
  hectoNav?: p.Flex<typeof HectoNav>;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  leadTitle?: p.Flex<"h1">;
  img?: p.Flex<typeof p.PlasmicImg>;
  blogBody?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  footerBottom?: p.Flex<"div">;
};

export interface DefaultBlogArticleProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBlogArticle__RenderFunc(props: {
  variants: PlasmicBlogArticle__VariantsArgs;
  args: PlasmicBlogArticle__ArgsType;
  overrides: PlasmicBlogArticle__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskILw5UiAaS1UF()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBlogArticle.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBlogArticle.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBlogArticle.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <HectoNav
              data-plasmic-name={"hectoNav"}
              data-plasmic-override={overrides.hectoNav}
              className={classNames("__wab_instance", sty.hectoNav)}
            />

            <CmsQueryRepeater
              data-plasmic-name={"cmsDataLoader"}
              data-plasmic-override={overrides.cmsDataLoader}
              className={classNames("__wab_instance", sty.cmsDataLoader)}
              desc={false}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bo4I4
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              filterField={"slug" as const}
              filterValue={(() => {
                try {
                  return $ctx.params.slug;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0 as const}
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fdrmC
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"blogArticles" as const}
              useDraft={false}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iHr2J)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__z0EV
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__p5Gd
                              )}
                              component={Link}
                              href={`/resources`}
                              platform={"nextjs"}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#BFBFBF" }}
                                >
                                  {"Resources"}
                                </span>
                              </React.Fragment>
                            </p.PlasmicLink>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h2>

                      <h1
                        data-plasmic-name={"leadTitle"}
                        data-plasmic-override={overrides.leadTitle}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.leadTitle
                        )}
                      >
                        {(() => {
                          try {
                            return $ctx.plasmicCmsBlogArticlesItem.data
                              .h1Heading;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      </h1>

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__xe1Vx
                        )}
                      >
                        {(() => {
                          try {
                            return $ctx.plasmicCmsBlogArticlesItem.data
                              .h2Subtitle;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ijk7D
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gYrS8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wImhJ
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___1KDtj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__rY6Sd
                                  )}
                                >
                                  <p.PlasmicImg
                                    data-plasmic-name={"img"}
                                    data-plasmic-override={overrides.img}
                                    alt={""}
                                    className={classNames(sty.img)}
                                    displayHeight={"auto" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"74px" as const}
                                    loading={"lazy" as const}
                                    src={{
                                      src: "/plasmic/hecto/images/component11Png.png",
                                      fullWidth: 500,
                                      fullHeight: 500,
                                      aspectRatio: undefined
                                    }}
                                  />
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___2MZNg
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bekPx
                                    )}
                                  >
                                    {"Team Hecto"}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : null}

                        <div
                          data-plasmic-name={"blogBody"}
                          data-plasmic-override={overrides.blogBody}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.blogBody
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return $ctx.plasmicCmsBlogArticlesItem.data
                                    .body;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Enter some text";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </div>
                      </div>
                    </div>

                    <PlasmicHead
                      data-plasmic-name={"head"}
                      data-plasmic-override={overrides.head}
                      className={classNames("__wab_instance", sty.head)}
                      description={(() => {
                        try {
                          return $ctx.plasmicCmsBlogArticlesItem.data
                            .metaDescription;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      image={"/plasmic/hecto/images/metaImagepng.png"}
                      title={(() => {
                        try {
                          return (
                            "Hecto | " +
                            $ctx.plasmicCmsBlogArticlesItem.data.h1Heading
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </React.Fragment>
                )}
              </ph.DataCtxReader>
            </CmsQueryRepeater>

            <div className={classNames(projectcss.all, sty.freeBox___20TbT)}>
              <div className={classNames(projectcss.all, sty.columns__qtgji)}>
                <div className={classNames(projectcss.all, sty.column__hqMhe)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__vVVd4
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Ready to start your campaign?"}
                      </span>
                    </React.Fragment>
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7Fvv
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Find the perfect newsletter for your brand"}
                      </span>
                    </React.Fragment>
                  </div>

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"blue" as const}
                    endIcon={
                      <ArrowRightsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mIivc
                      )}
                    >
                      {"Search Newsletters"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ylbjs)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___9N3ST)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ttB6N
                    )}
                  >
                    {"© Hecto . All rights reserved"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qqyug
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eU62L
                      )}
                    >
                      {"Privacy"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__anPlR
                      )}
                    >
                      {"Terms and Conditions"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xGyTo
                      )}
                    >
                      {"Contact Us"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oGOdd
                      )}
                    >
                      {"Blog"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__pQpcn)}
                    />
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hectoNav",
    "cmsDataLoader",
    "leadTitle",
    "img",
    "blogBody",
    "head",
    "button",
    "svg",
    "footerBottom"
  ],
  hectoNav: ["hectoNav"],
  cmsDataLoader: ["cmsDataLoader", "leadTitle", "img", "blogBody", "head"],
  leadTitle: ["leadTitle"],
  img: ["img"],
  blogBody: ["blogBody"],
  head: ["head"],
  button: ["button", "svg"],
  svg: ["svg"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hectoNav: typeof HectoNav;
  cmsDataLoader: typeof CmsQueryRepeater;
  leadTitle: "h1";
  img: typeof p.PlasmicImg;
  blogBody: "div";
  head: typeof PlasmicHead;
  button: typeof Button;
  svg: "svg";
  footerBottom: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogArticle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogArticle__VariantsArgs;
    args?: PlasmicBlogArticle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogArticle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlogArticle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlogArticle__ArgProps,
          internalVariantPropNames: PlasmicBlogArticle__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlogArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogArticle";
  } else {
    func.displayName = `PlasmicBlogArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogArticle = Object.assign(
  // Top-level PlasmicBlogArticle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hectoNav: makeNodeComponent("hectoNav"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    leadTitle: makeNodeComponent("leadTitle"),
    img: makeNodeComponent("img"),
    blogBody: makeNodeComponent("blogBody"),
    head: makeNodeComponent("head"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicBlogArticle
    internalVariantProps: PlasmicBlogArticle__VariantProps,
    internalArgProps: PlasmicBlogArticle__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hecto Blog",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBlogArticle;
/* prettier-ignore-end */
